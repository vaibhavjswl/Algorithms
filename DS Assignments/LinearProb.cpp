#include<iostream>
#include <sstream>  // for string streams
#include <string>  // for string
using namespace std ;


class HashTable{

    int table[100][2] ;
    int buckets ;

    public:

    HashTable(){
    buckets = 2 ;
    for (int i=0 ; i < 100 ; i++){
        for(int j = 0 ; j < 2 ; j++){
            table[i][j] = -63200 ;
        }
    }
}

void printTable(){
        cout <<"Hashtable With Linear Probing "<<endl ; 
        cout <<"index  bucket1  bucket2" << endl ; 

       for(int i=0 ; i < 100 ; i++){
           cout <<"   "<< i << ".    ";

           for(int j = 0 ; j < 2 ; j++){
                if(table[i][j]!=-63200)
                    cout << table[i][j] << "      " ;
                else
                {
                    cout << "-1" << "      " ; 
                }
           }
           cout << "\n" ;
       }
    }

static int hashf(int num){
    return (num%100) ;
}

void putele(long int num){
    bool inserted = false ;
    int indx = HashTable::hashf(num);

    for(int i = indx ; i < 100 ; i++ ){
        for (int j = 0 ; j < buckets ; j ++){
            if(table[i][j] == -63200){
                table[i][j] = num ;
                inserted = true ;
                break ;
            }
        }
        if(inserted)
            break ;
    }
}


static int midsquare(int num){

    int sqr = num*num ;
        int arr[10] ;
        int siz = 0 ;
        int n = sqr ;

        for(int i = 0 ; n!=0 ; i++){
            arr[i] = n%10  ;
            n=n/10 ;
            siz++ ;
        }

        if (siz%2 != 0 ){
            arr[siz] = 0 ;
            siz++ ;
        }

        int middig = arr[siz/2]*10 + arr[(siz/2)-1] ;


        return (middig) ;
}

static int shifthash(long int k){

    int arr[25] ;
    int siz = 0 ;

    for(int i = 0 ; k!=0 ; i++){
        arr[i] = k%10  ;
        k=k/10 ;
        siz++ ;
    }
    
    int shiftsum = 0;
    int m = 0 ; 
    if(siz%2!=0){
        shiftsum = arr[m++] ; 
    }


    for(int i = siz-1 ; i>m ; i-=2){

        shiftsum = shiftsum + arr[i]*10+arr[i-1] ; 
    }


    return (shiftsum) ;
    
}

static int shiftfbhash(long int k){

    int arr[25] ;
    int siz = 0 ;

    for(int i = 0 ; k!=0 ; i++){
        arr[i] = k%10  ;
        k=k/10 ;
        siz++ ;
    }
    
    int shiftsum = 0;
    int m = 0 ; 
    if(siz%2!=0){
        shiftsum = arr[m++] ; 
    }


    for(int i = siz-1 ; i>m ; i-=2){

        if(i==siz-1 ||  i==siz/2 || i==1)
            shiftsum = shiftsum + arr[i]*10+arr[i-1] ; 
        else 
            shiftsum = shiftsum + arr[i]+arr[i-1]*10 ; 
    }


    return (shiftsum) ;
    
}
};

int main(){

    HashTable t ;

    cout << "Hash generated by Mod Division Hash Function on Input 225: " << HashTable::hashf(225) << endl ; 
    cout << "Hash generated by Mid Square Hash Function on Input 35: " << HashTable::midsquare(35) << endl ; 
    cout << "Hash generated by Shift  Hash Function : on Input 123456789 :" << HashTable::shifthash(123456789) << endl ; 
    cout << "Hash generated by Shift Folding Hash Function : on Input 123456789 : " << HashTable::shiftfbhash(123456789) << endl ; 
   

    t.putele(1) ;
    t.putele(20) ;
    
    t.putele(21) ;
    t.putele(21) ;
    t.putele(21) ;
    t.putele(22) ;
    t.putele(21) ;
    t.putele(22) ;
    t.putele(16) ;
    t.putele(28) ;
    t.putele(36) ;
    t.putele(116) ;
    t.putele(228) ;
    t.putele(136) ;
    t.putele(416) ;

    t.printTable() ;
}
